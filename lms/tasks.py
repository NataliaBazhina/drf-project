from celery import shared_task
from celery import shared_task
from django.core.mail import send_mail
from django.conf import settings
import smtplib
import logging

logger = logging.getLogger(__name__)


@shared_task(bind=True, max_retries=3)
def subscription_message(self, course, email):
    try:
        send_mail(
            subject="–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ",
            message=f"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞ {course} –æ–±–Ω–æ–≤–∏–ª–∏—Å—å",
            from_email=settings.EMAIL_HOST_USER,
            recipient_list=[email],
            fail_silently=False
        )
        logger.info(f"–ü–∏—Å—å–º–æ –¥–ª—è {email} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    except smtplib.SMTPAuthenticationError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP: {str(e)}"
        logger.error(error_msg)
        print(f"‚ùå {error_msg}")
        raise self.retry(exc=e, countdown=60)  # –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥

    except smtplib.SMTPException as e:
        error_msg = f"–û—à–∏–±–∫–∞ SMTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ {email}: {str(e)}"
        logger.error(error_msg)
        print(f"‚ö†Ô∏è {error_msg}")
        raise self.retry(exc=e, countdown=120)

    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {email}: {str(e)}"
        logger.exception(error_msg)  # –õ–æ–≥–∏—Ä—É–µ—Ç traceback
        print(f"üî• {error_msg}")
        raise self.retry(exc=e, countdown=300)